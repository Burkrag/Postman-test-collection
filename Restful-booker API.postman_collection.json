{
	"info": {
		"_postman_id": "4125ae13-b3e9-4061-b91d-6e652db949ce",
		"name": "Restful-booker API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14044806",
		"_collection_link": "https://www.postman.com/lunar-zodiac-974290/workspace/jan-collection/collection/14044806-4125ae13-b3e9-4061-b91d-6e652db949ce?action=share&source=collection_link&creator=14044806"
	},
	"item": [
		{
			"name": "SmokeTests",
			"item": [
				{
					"name": "CreateToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var token = jsonData.token;\r",
									"pm.collectionVariables.set(\"token\", token);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Token is not empty\", function () {\r",
									"    pm.expect(token).to.not.be.empty;\r",
									"    pm.expect(token).to.be.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateBooking",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check bookingid\", function () {",
									"    pm.expect(pm.response.json().bookingid).to.be.a(\"Number\");",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Book has correct values\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.booking.firstname).to.eql(\"Jan\");",
									"    pm.expect(jsonData.booking.lastname).to.eql(\"Testowy\");",
									"    pm.expect(jsonData.booking.totalprice).to.eql(47);",
									"    pm.expect(jsonData.booking.depositpaid).to.eql(true);",
									"    pm.expect(jsonData.booking.bookingdates.checkin).to.eql(\"2025-05-31\");",
									"    pm.expect(jsonData.booking.bookingdates.checkout).to.eql(\"2025-10-15\");",
									"    pm.expect(jsonData.booking.additionalneeds).to.eql(\"Testy!\");",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"var testBookingId = jsonData.bookingid;",
									"pm.collectionVariables.set(\"testBookingId\", testBookingId);",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"Jan\",\r\n    \"lastname\" : \"Testowy\",\r\n    \"totalprice\" : 47,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-05-31\",\r\n        \"checkout\" : \"2025-10-15\"\r\n    },\r\n    \"additionalneeds\" : \"Testy!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/booking",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetBookingIds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is a list\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"Array\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/booking",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetBooking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Book has correct schema\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.firstname).to.be.a(\"String\");\r",
									"    pm.expect(jsonData.lastname).to.be.a(\"String\");\r",
									"    pm.expect(jsonData.totalprice).to.be.a(\"Number\");\r",
									"    pm.expect(jsonData.depositpaid).to.be.a(\"Boolean\");\r",
									"    pm.expect(jsonData.bookingdates.checkin).to.be.a(\"String\");\r",
									"    pm.expect(jsonData.bookingdates.checkout).to.be.a(\"String\");\r",
									"    pm.expect(jsonData.additionalneeds).to.be.a(\"String\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/booking/{{testBookingId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking",
								"{{testBookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateBooking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Book has correct update values\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.firstname).to.eql(\"Jaan\");\r",
									"    pm.expect(jsonData.lastname).to.eql(\"Tesstowy\");\r",
									"    pm.expect(jsonData.totalprice).to.eql(474);\r",
									"    pm.expect(jsonData.depositpaid).to.eql(true);\r",
									"    pm.expect(jsonData.bookingdates.checkin).to.eql(\"2025-07-01\");\r",
									"    pm.expect(jsonData.bookingdates.checkout).to.eql(\"2025-11-15\");\r",
									"    pm.expect(jsonData.additionalneeds).to.eql(\"Tesssty!!!\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"value": "token={{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"Jaan\",\r\n    \"lastname\" : \"Tesstowy\",\r\n    \"totalprice\" : 474,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-06-31\",\r\n        \"checkout\" : \"2025-11-15\"\r\n    },\r\n    \"additionalneeds\" : \"Tesssty!!!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/booking/{{testBookingId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking",
								"{{testBookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PartialUpdateBooking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Book has correct update values\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.firstname).to.eql(\"Maria\");\r",
									"    pm.expect(jsonData.lastname).to.eql(\"Testowa\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Cookie",
								"value": "token={{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"Maria\",\r\n    \"lastname\" : \"Testowa\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/booking/{{testBookingId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking",
								"{{testBookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteBooking",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var base_url = pm.environment.get(\"baseUrl\");\r",
									"var booking_id = pm.environment.get(\"testBookingId\");\r",
									"\r",
									"pm.test(\"Booking is deleted\", function () {\r",
									"    pm.sendRequest(\r",
									"        {\r",
									"            url: base_url + \"/booking/\" + booking_id,\r",
									"            method: \"Get\"\r",
									"        },\r",
									"        function (err, response) {\r",
									"            pm.expect(response.status).to.eql('Not Found')\r",
									"        }\r",
									"    );\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Cookie",
								"value": "token={{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/booking/{{testBookingId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking",
								"{{testBookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "HealthCheck",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/ping",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"requests": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"requests": {},
						"exec": [
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "testBookingId",
			"value": ""
		},
		{
			"key": "baseUrl",
			"value": ""
		}
	]
}